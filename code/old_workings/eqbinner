
import numpy as np

from matplotlib.widgets import PolygonSelector
from matplotlib.path import Path
from obspy.clients.fdsn import Client
import obspy
import matplotlib.pyplot as plt
import cartopy.crs as ccrs
import os
import util
import matplotlib.patches as patches

class SelectFromCollection(object):
    """Select indices from a matplotlib collection using `PolygonSelector`.

    Selected indices are saved in the `ind` attribute. This tool fades out the
    points that are not part of the selection (i.e., reduces their alpha
    values). If your collection has alpha < 1, this tool will permanently
    alter the alpha values.

    Note that this tool selects collection objects based on their *origins*
    (i.e., `offsets`).

    Parameters
    ----------
    ax : :class:`~matplotlib.axes.Axes`
        Axes to interact with.

    collection : :class:`matplotlib.collections.Collection` subclass
        Collection you want to select from.

    alpha_other : 0 <= float <= 1
        To highlight a selection, this tool sets all selected points to an
        alpha value of 1 and non-selected points to `alpha_other`.
    """

    def __init__(self, ax, collection, alpha_other=0.3):
        self.canvas = ax.figure.canvas
        self.collection = collection
        self.alpha_other = alpha_other

        self.xys = collection.get_offsets()
        self.Npts = len(self.xys)

        # Ensure that we have separate colors for each object
        self.fc = collection.get_facecolors()
        if len(self.fc) == 0:
            raise ValueError('Collection must have a facecolor')
        elif len(self.fc) == 1:
            self.fc = np.tile(self.fc, (self.Npts, 1))

        self.poly = PolygonSelector(ax, self.onselect)
        self.ind = []

    def onselect(self, verts):
        path = Path(verts)
        self.ind = np.nonzero(path.contains_points(self.xys))[0]
        self.fc[:, -1] = self.alpha_other
        self.fc[self.ind, -1] = 1
        self.collection.set_facecolors(self.fc)
        self.canvas.draw_idle()

    def disconnect(self):
        self.poly.disconnect_events()
        self.fc[:, -1] = 1
        self.collection.set_facecolors(self.fc)
        self.canvas.draw_idle()


root = '/home/earthquakes1/homes/Rebecca/phd/data/2019_global_m3/'
eq_list = os.listdir(root)
client = Client("IRIS")
cat = obspy.read_events('/home/earthquakes1/homes/Rebecca/phd/data/2019_global_m3_catalog.xml')
eq_with_data = []
cat_with_data = cat.copy()
cat_with_data.clear()
loc = []
lats = []
longs = []
for event in cat:
    eq_name = util.catEventToFileName(event)
    if os.path.isdir(root+eq_name) and os.path.isdir(root+eq_name+'/station_xml_files') and os.path.exists(root+eq_name+'/picks.pkl'):
        eq_with_data.append(eq_name)
        cat_with_data.extend([event])
        loc.append([event.origins[0].longitude, event.origins[0].latitude])
        lats.append(event.origins[0].latitude)
        longs.append(event.origins[0].longitude)

ax = plt.axes(projection=ccrs.PlateCarree())
ax.coastlines()
# fig, ax = plt.subplots()

pts = ax.scatter(longs, lats)

selector = SelectFromCollection(ax, pts)

print("Select points in the figure by enclosing them within a polygon.")
print("Press the 'esc' key to start a new polygon.")
print("Try holding the 'shift' key to move all of the vertices.")
print("Try holding the 'ctrl' key to move a single vertex.")

plt.show()

selector.disconnect()

polygon_x_coords = selector.poly._xs_at_press
polygon_y_coords = selector.poly._ys_at_press

polygon = []
codes = []
for i in range(len(polygon_x_coords)):
    polygon.append([polygon_x_coords[i], polygon_y_coords[i]])
    codes.append(Path.LINETO)

codes[0] = Path.MOVETO,
codes.append(Path.CLOSEPOLY,)
polygon.append([polygon_x_coords[0], polygon_y_coords[0]])


path = Path(polygon)
fig, ax = plt.subplots()
patch = patches.PathPatch(path, facecolor='orange', lw=2)
ax.add_patch(patch)
pts = ax.scatter(longs, lats)
plt.show()
inside2 = path.contains_points(loc)
indices_inside = np.where(inside2)

name = input()
