{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2dac9731-fe6f-4738-9114-b7ce12bbcadf",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import scipy\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import obspy\n",
    "import pickle\n",
    "from obspy import UTCDateTime\n",
    "from obspy.clients.fdsn import Client\n",
    "import util\n",
    "import pandas as pd\n",
    "import math"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4049e2ba-dc09-4cc6-b1aa-c4ec70165ce1",
   "metadata": {},
   "outputs": [],
   "source": [
    "eq_object_1s_bandpass_01_19_snr_20_blank_025 = [0.6450, 0.6275, 0.5997, 0.5756, 0.5474, 0.5206, 0.4856, 0.4644, 0.4505, 0.4366, 0.4137, 0.3950, 0.3639, 0.3256, 0.2994, 0.2619, 0.2327, 0.2250, 0.2125, 0.2078, 0.1901, 0.1730, 0.1381, 0.1206, 0.0758, 0.0359, 0.0349, 0.0657, 0.0869, 0.0870, 0.0163, 0.04447, 0.0460, 0.0148,-0.0724,-0.0841, 0.0179, 0.1090, 0.0409, 0.0291, 0.5043, 1, 0, 0 , 0, 0 , 0 , 0 ,0 ,0]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "89e694ba-9e4e-4aa1-a4ea-3fb3ede9ebab",
   "metadata": {},
   "outputs": [],
   "source": [
    "magnitudes = np.arange(3,8, 0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "88801cec-b28e-4194-8bbb-a8eddac8afb8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "50"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(magnitudes)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3dcfdb91-a6b0-4f5c-98f1-47fd5f6aefd4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "50"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(eq_object_1s_bandpass_01_19_snr_20_blank_025)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "0c9363ed-40f0-4bc3-aa1a-abc32fe9f456",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.0, 0.2)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(magnitudes, np.array(eq_object_1s_bandpass_01_19_snr_20_blank_025)**2)\n",
    "plt.ylim([0,0.2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a5aa7b52-9472-4e23-878b-a3940522941a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
